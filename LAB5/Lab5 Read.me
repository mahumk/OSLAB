Was only able to successfully fulfill deliverable item 2 and sort of 3.

We couldn't get it working but the plan in mind for implementation was as follows.
First was getting the arguements from the command line. There were 3 resources that need to be kept in mind. The 3 numbers on the command line represented the number of resources that would be available for use.
Next was randomly assigning the maximum number that can be allocated at once for each thread and for each type of resource. This was done by randomly picking numbers between 1 and 10 (inclusive).
Then the initialization of mutex locks and threads. Only 2 mutex locks are needed, one for allocation and one for deallocation. The mutex locks will help with getting which thread requested for resources allocation/deallocation first. 
With the creation of the threads, they were first created to run using the request_res fucntion. This is done in a forveer loop
The request res function would first use a mutex lock to see which thread came first. Then a random number for each resource will be picked. Those numbers represent the number of resources they want to allocate. Then bankers algorithm will be used to see if there is enough resources to allocate and still have some leftover for the other threads. So each thread will start by having some number less than the max already allocated to each resource in each thread. Then the random numbers that are picked will be stored in an array called needed. Then using the maximum array which is the max resources a thread needs, (without actually assigning just testing) it will use the available resources to fulfuil the request needed for the asking thread then check if it has enough resources leftover to fulfill the rest of the threads to their maximum asking amount. If yes, then it will go ahead and allocate the resources to thread with the intent that it will meet the maximum amount the thread is asking for so that it can free up all those resources making more available. Then it will print a message saying the allocation was successful. When it is able to safely fill all the resources, the release resources function will be called which just updates the resources available. 
It will keep repeating these steps in a loop until all the threads have hopefully been fulfilled with their asking of resources. Should a request not be possible, it will print a message saying it is not possible.
